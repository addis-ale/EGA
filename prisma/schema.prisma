datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String      @unique
  image     String?
  hashedPassword String
  role      Role        @default(USER)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  cart      Cart?
  wishlist  Wishlist?   
}
enum Role {
  USER
  ADMIN
}
model Wishlist {
  id        String              @id @default(auto()) @map("_id") @db.ObjectId
  userId    String              @unique @db.ObjectId 
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  wishlists WishlistOnProduct[] 
  createdAt DateTime            @default(now())
}

model WishlistOnProduct {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  wishlistId String @db.ObjectId
  productId  String @db.ObjectId
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([wishlistId, productId]) 
}

model Product {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  productName        String
  productDescription String
  uploadedCoverImage String
  discountPercentage Float
  ageRestriction     Int
  gameType          String
  availableProduct  Int
  price            Float
  views            Int      @default(0) 
  salesCount       Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  cartItems CartOnProduct[]
  wishlists WishlistOnProduct[]
   
}
model Cart {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  userId    String           @unique @db.ObjectId 
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems CartOnProduct[]  
  createdAt DateTime         @default(now())
}

model CartOnProduct {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  cartId     String   @db.ObjectId
  productId  String   @db.ObjectId
  quantity   Int      @default(1) 
  cart       Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId]) 
}
