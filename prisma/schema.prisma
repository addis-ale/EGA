// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
    name String
    email String @unique
    emailVerfied DateTime?
    password String
    image String?
    role UserRoll  @default(USER)
    review Review[]
    cart Cart[]
    order Order[]
    wishlist Wishlist[]
    search SearchHistory[]
    accounts  Account[]
    sessions  Session[]
     Authenticator Authenticator[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
enum UserRoll {
   ADMIN
  USER
}


model Product {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  productName  String  @unique
  gameType   GameType 
  uploadedCoverImage  String?
  uploadedVideo  String?
  discountPercentage  Int
  price        Int
  productDescription String
  ageRestriction  Int
  gameguide      Gameguides[]
    views            Int      @default(0) 
  salesCount       Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  availableProduct Available[]
  review  Review[]
  Wishlist WishlistOnProduct[]
  



  CartItem CartItem[]

  OrderItem OrderItem[]
}
model Available {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
gameId String   @db.ObjectId @unique
game Product @relation(fields: [gameId],references: [id],onDelete: Cascade)
availableProduct Int @default(0)
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
}

model Review {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
     user  User @relation(fields:[userId],references: [id])
     userId String
     game Product @relation(fields: [productId],references: [id],onDelete: Cascade)
     productId String
     comment String 
     Likes Int?
     disLikes  Int?
     rating Int @default(1)
      createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Cart {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
       userId String @unique
       user User @relation(fields: [userId], references: [id],onDelete: Cascade)
       items CartItem[]
       totalPrice Float
       createdAt DateTime @default(now())
       updatedAt DateTime @updatedAt


}
model CartItem{
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
         cartId String
         cart Cart @relation(fields: [cartId],references: [id],onDelete: Cascade)
         productId String  @unique
         product    Product @relation(fields: [productId], references: [id], onDelete: Cascade) // âœ… Relation added
         price Float
         quantity Int
         imageUruploadedCoverImagel String



} 
model Order{
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
           userId String   
           user User @relation(fields: [userId],references: [id])
           orderItem OrderItem[]
           status Orderstatus @default(PENDING)
           paymentMethod PaymentMethod
           createdAt DateTime @default(now())
           updatedAt DateTime @updatedAt
           totalPrice Float

}
enum PaymentMethod{
  TeleBirr
  PickUp

}
model Wishlist {
  id        String              @id @default(auto()) @map("_id") @db.ObjectId
  userId    String              @unique @db.ObjectId 
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  wishlists WishlistOnProduct[] 
  createdAt DateTime            @default(now())
}
model WishlistOnProduct {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  wishlistId String @db.ObjectId
  productId  String @db.ObjectId
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([wishlistId, productId]) 
}

model Gameguides{
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    productId String
    product Product @relation(fields: [productId],references: [id])
    instructions String
}
model OrderItem{
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
          orderId String
          order Order @relation(fields: [orderId],references: [id],onDelete: Cascade)
          productId String @unique
                   product    Product @relation(fields: [productId], references: [id], onDelete: Cascade) 
          
          quantity Int
        

 
}
model SearchHistory {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
            userId String   @unique
            user User @relation(fields: [userId],references: [id],onDelete: Cascade)
            search Search[]
            createdAt DateTime @default(now())
            updatedAt DateTime @updatedAt



}
model Search{
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
            searchId String
            searchHitory SearchHistory @relation(fields: [searchId],references: [id],onDelete: Cascade)
            searchQuery String 

}
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}


enum GameType{
  TABLE_TOP
  PHYSICAL

}








enum Orderstatus {
  SHIPPED
  PENDING
  COMPLETED
  CANCELED
}
